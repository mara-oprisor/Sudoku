============================== Mace4 =================================
Mace4 (64) version 2009-11A, November 2009.
Process 1654 was started by mara on DESKTOP-N3L6QMS,
Mon Dec  9 00:15:57 2024
The command was "/mnt/c/Users/user/Desktop/Facultate/AI/LADR-2009-11A/bin/mace4 -m -1 -f solve.in".
============================== end of head ===========================

============================== INPUT =================================

% Reading from file solve.in

assign(domain_size,9).
    % assign(domain_size, 9) -> assign(start_size, 9).
    % assign(domain_size, 9) -> assign(end_size, 9).

formulas(assumptions).
(all row all col1 all col2 (value(row,col1) = value(row,col2) -> col1 = col2)).
(all row all number exists col value(row,col) = number).
(all row1 all row2 all col (value(row1,col) = value(row2,col) -> row1 = row2)).
(all col all number exists row value(row,col) = number).
(all x all y (same_square(x,y) -> same_square(y,x))).
(all x same_square(x,x)).
same_square(0,1).
same_square(1,2).
same_square(2,0).
same_square(3,4).
same_square(4,5).
same_square(5,3).
same_square(6,7).
same_square(7,8).
same_square(8,6).
-same_square(0,3).
-same_square(0,4).
-same_square(0,5).
-same_square(0,6).
-same_square(0,7).
-same_square(0,8).
-same_square(1,3).
-same_square(1,4).
-same_square(1,5).
-same_square(1,6).
-same_square(1,7).
-same_square(1,8).
-same_square(2,3).
-same_square(2,4).
-same_square(2,5).
-same_square(2,6).
-same_square(2,7).
-same_square(2,8).
-same_square(3,0).
-same_square(3,1).
-same_square(3,2).
-same_square(3,6).
-same_square(3,7).
-same_square(3,8).
-same_square(4,0).
-same_square(4,1).
-same_square(4,2).
-same_square(4,6).
-same_square(4,7).
-same_square(4,8).
-same_square(5,0).
-same_square(5,1).
-same_square(5,2).
-same_square(5,6).
-same_square(5,7).
-same_square(5,8).
-same_square(6,0).
-same_square(6,1).
-same_square(6,2).
-same_square(6,3).
-same_square(6,4).
-same_square(6,5).
-same_square(7,0).
-same_square(7,1).
-same_square(7,2).
-same_square(7,3).
-same_square(7,4).
-same_square(7,5).
-same_square(8,0).
-same_square(8,1).
-same_square(8,2).
-same_square(8,3).
-same_square(8,4).
-same_square(8,5).
(all row1 all col1 all row2 all col2 (same_square(row1,row2) & same_square(col1,col2) & value(row1,col1) = value(row2,col2) -> row1 = row2 & col1 = col2)).
end_of_list.

formulas(known_numbers).
value(0,0) = 6.
value(0,1) = 8.
value(0,2) = 7.
value(0,3) = 1.
value(0,4) = 0.
value(0,7) = 5.
value(0,8) = 4.
value(1,0) = 4.
value(1,1) = 3.
value(1,3) = 5.
value(1,4) = 7.
value(1,8) = 8.
value(2,0) = 2.
value(2,2) = 5.
value(2,5) = 4.
value(2,6) = 0.
value(2,7) = 7.
value(2,8) = 6.
value(3,0) = 1.
value(3,1) = 7.
value(3,2) = 4.
value(3,4) = 2.
value(3,5) = 3.
value(3,6) = 8.
value(4,0) = 0.
value(4,2) = 8.
value(4,3) = 7.
value(4,4) = 1.
value(4,5) = 5.
value(4,6) = 4.
value(4,7) = 3.
value(4,8) = 2.
value(5,0) = 3.
value(5,1) = 5.
value(5,3) = 4.
value(5,4) = 6.
value(5,5) = 8.
value(5,6) = 7.
value(5,7) = 0.
value(6,0) = 5.
value(6,1) = 0.
value(6,2) = 6.
value(6,3) = 8.
value(6,4) = 4.
value(6,5) = 7.
value(6,6) = 1.
value(6,7) = 2.
value(6,8) = 3.
value(7,0) = 8.
value(7,1) = 2.
value(7,2) = 1.
value(7,3) = 6.
value(7,4) = 3.
value(7,5) = 0.
value(7,6) = 5.
value(7,8) = 7.
value(8,0) = 7.
value(8,1) = 4.
value(8,2) = 3.
value(8,6) = 6.
value(8,7) = 8.
end_of_list.

% From the command line: assign(max_models, -1).

============================== end of input ==========================

============================== PROCESS NON-CLAUSAL FORMULAS ==========

% Formulas that are not ordinary clauses:
1 (all row all col1 all col2 (value(row,col1) = value(row,col2) -> col1 = col2)) # label(non_clause).  [assumption].
2 (all row all number exists col value(row,col) = number) # label(non_clause).  [assumption].
3 (all row1 all row2 all col (value(row1,col) = value(row2,col) -> row1 = row2)) # label(non_clause).  [assumption].
4 (all col all number exists row value(row,col) = number) # label(non_clause).  [assumption].
5 (all x all y (same_square(x,y) -> same_square(y,x))) # label(non_clause).  [assumption].
6 (all x same_square(x,x)) # label(non_clause).  [assumption].
7 (all row1 all col1 all row2 all col2 (same_square(row1,row2) & same_square(col1,col2) & value(row1,col1) = value(row2,col2) -> row1 = row2 & col1 = col2)) # label(non_clause).  [assumption].

============================== end of process non-clausal formulas ===

============================== CLAUSES FOR SEARCH ====================

formulas(mace4_clauses).
value(x,y) != value(x,z) | y = z.
value(x,f1(x,y)) = y.
value(x,y) != value(z,y) | x = z.
value(f2(x,y),x) = y.
-same_square(x,y) | same_square(y,x).
same_square(x,x).
same_square(0,1).
same_square(1,2).
same_square(2,0).
same_square(3,4).
same_square(4,5).
same_square(5,3).
same_square(6,7).
same_square(7,8).
same_square(8,6).
-same_square(0,3).
-same_square(0,4).
-same_square(0,5).
-same_square(0,6).
-same_square(0,7).
-same_square(0,8).
-same_square(1,3).
-same_square(1,4).
-same_square(1,5).
-same_square(1,6).
-same_square(1,7).
-same_square(1,8).
-same_square(2,3).
-same_square(2,4).
-same_square(2,5).
-same_square(2,6).
-same_square(2,7).
-same_square(2,8).
-same_square(3,0).
-same_square(3,1).
-same_square(3,2).
-same_square(3,6).
-same_square(3,7).
-same_square(3,8).
-same_square(4,0).
-same_square(4,1).
-same_square(4,2).
-same_square(4,6).
-same_square(4,7).
-same_square(4,8).
-same_square(5,0).
-same_square(5,1).
-same_square(5,2).
-same_square(5,6).
-same_square(5,7).
-same_square(5,8).
-same_square(6,0).
-same_square(6,1).
-same_square(6,2).
-same_square(6,3).
-same_square(6,4).
-same_square(6,5).
-same_square(7,0).
-same_square(7,1).
-same_square(7,2).
-same_square(7,3).
-same_square(7,4).
-same_square(7,5).
-same_square(8,0).
-same_square(8,1).
-same_square(8,2).
-same_square(8,3).
-same_square(8,4).
-same_square(8,5).
-same_square(x,y) | -same_square(z,u) | value(y,u) != value(x,z) | y = x.
-same_square(x,y) | -same_square(z,u) | value(y,u) != value(x,z) | u = z.
value(0,0) = 6.
value(0,1) = 8.
value(0,2) = 7.
value(0,3) = 1.
value(0,4) = 0.
value(0,7) = 5.
value(0,8) = 4.
value(1,0) = 4.
value(1,1) = 3.
value(1,3) = 5.
value(1,4) = 7.
value(1,8) = 8.
value(2,0) = 2.
value(2,2) = 5.
value(2,5) = 4.
value(2,6) = 0.
value(2,7) = 7.
value(2,8) = 6.
value(3,0) = 1.
value(3,1) = 7.
value(3,2) = 4.
value(3,4) = 2.
value(3,5) = 3.
value(3,6) = 8.
value(4,0) = 0.
value(4,2) = 8.
value(4,3) = 7.
value(4,4) = 1.
value(4,5) = 5.
value(4,6) = 4.
value(4,7) = 3.
value(4,8) = 2.
value(5,0) = 3.
value(5,1) = 5.
value(5,3) = 4.
value(5,4) = 6.
value(5,5) = 8.
value(5,6) = 7.
value(5,7) = 0.
value(6,0) = 5.
value(6,1) = 0.
value(6,2) = 6.
value(6,3) = 8.
value(6,4) = 4.
value(6,5) = 7.
value(6,6) = 1.
value(6,7) = 2.
value(6,8) = 3.
value(7,0) = 8.
value(7,1) = 2.
value(7,2) = 1.
value(7,3) = 6.
value(7,4) = 3.
value(7,5) = 0.
value(7,6) = 5.
value(7,8) = 7.
value(8,0) = 7.
value(8,1) = 4.
value(8,2) = 3.
value(8,6) = 6.
value(8,7) = 8.
end_of_list.

============================== end of clauses for search =============

% The largest natural number in the input is 8.

============================== DOMAIN SIZE 9 =========================

============================== MODEL =================================

interpretation( 9, [number=1, seconds=0], [

        function(value(_,_), [
			   6, 8, 7, 1, 0, 2, 3, 5, 4,
			   4, 3, 0, 5, 7, 6, 2, 1, 8,
			   2, 1, 5, 3, 8, 4, 0, 7, 6,
			   1, 7, 4, 0, 2, 3, 8, 6, 5,
			   0, 6, 8, 7, 1, 5, 4, 3, 2,
			   3, 5, 2, 4, 6, 8, 7, 0, 1,
			   5, 0, 6, 8, 4, 7, 1, 2, 3,
			   8, 2, 1, 6, 3, 0, 5, 4, 7,
			   7, 4, 3, 2, 5, 1, 6, 8, 0 ]),

        function(f1(_,_), [
			   4, 3, 5, 6, 8, 7, 0, 2, 1,
			   2, 7, 6, 1, 0, 3, 5, 4, 8,
			   6, 1, 0, 3, 5, 2, 8, 7, 4,
			   3, 0, 4, 5, 2, 8, 7, 1, 6,
			   0, 4, 8, 7, 6, 5, 1, 3, 2,
			   7, 8, 2, 0, 3, 1, 4, 6, 5,
			   1, 6, 7, 8, 4, 0, 2, 5, 3,
			   5, 2, 1, 4, 7, 6, 3, 8, 0,
			   8, 5, 3, 2, 1, 4, 6, 0, 7 ]),

        function(f2(_,_), [
			   4, 3, 2, 5, 1, 6, 0, 8, 7,
			   6, 2, 7, 1, 8, 5, 4, 3, 0,
			   1, 7, 5, 8, 3, 2, 6, 0, 4,
			   3, 0, 8, 2, 5, 1, 7, 4, 6,
			   0, 4, 3, 7, 6, 8, 5, 1, 2,
			   7, 8, 0, 3, 2, 4, 1, 6, 5,
			   2, 6, 1, 0, 4, 7, 8, 5, 3,
			   5, 1, 6, 4, 7, 0, 3, 2, 8,
			   8, 5, 4, 6, 0, 3, 2, 7, 1 ]),

        relation(same_square(_,_), [
			   1, 1, 1, 0, 0, 0, 0, 0, 0,
			   1, 1, 1, 0, 0, 0, 0, 0, 0,
			   1, 1, 1, 0, 0, 0, 0, 0, 0,
			   0, 0, 0, 1, 1, 1, 0, 0, 0,
			   0, 0, 0, 1, 1, 1, 0, 0, 0,
			   0, 0, 0, 1, 1, 1, 0, 0, 0,
			   0, 0, 0, 0, 0, 0, 1, 1, 1,
			   0, 0, 0, 0, 0, 0, 1, 1, 1,
			   0, 0, 0, 0, 0, 0, 1, 1, 1 ])
]).

============================== end of model ==========================

============================== STATISTICS ============================

For domain size 9.

Current CPU time: 0.00 seconds (total CPU time: 0.01 seconds).
Ground clauses: seen=14956, kept=2598.
Selections=0, assignments=0, propagations=324, current_models=1.
Rewrite_terms=4902, rewrite_bools=2634, indexes=14.
Rules_from_neg_clauses=187, cross_offs=1804.

============================== end of statistics =====================

User_CPU=0.01, System_CPU=0.00, Wall_clock=0.

Exiting with 1 model.

Process 1654 exit (all_models) Mon Dec  9 00:15:57 2024
The process finished Mon Dec  9 00:15:57 2024
